name: Platform Infrastructure & App Deployment

on:
  push:
    branches: [main, dev, feature/**]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: platform-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write

env:
  TF_IN_AUTOMATION: true
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: "us-central1"
  WIF_PROVIDER: ${{ secrets.GCP_WIF_PROVIDER }}
  TERRAFORM_SA: ${{ secrets.GCP_TERRAFORM_SA }}
  TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
  VIKUNJA_DB_PASSWORD: ${{ secrets.VIKUNJA_DB_PASSWORD }}
  KEYCLOAK_DB_PASSWORD: ${{ secrets.KEYCLOAK_DB_PASSWORD }}
  CLUSTER_NAME: "vikunja-gke"
  CLUSTER_LOCATION: "us-central1-a"
  CLOUDSQL_INSTANCE: "vikunja-db"
  KEYCLOAK_ADMIN_USER: "admin"
  KEYCLOAK_ADMIN_PASSWORD: "admin"
  PLATFORM_LB_IP_NAME: "vikunja-platform-lb-ip"
  KEYCLOAK_HOST: "keycloak.misskecupbung.xyz"
  VIKUNJA_HOST: "vikunja.misskecupbung.xyz"
  VIKUNJA_CLIENTSECRET: ${{ secrets.VIKUNJA_CLIENTSECRET }}
  PROD_APPROVERS: "misskecupbung"

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    outputs:
      workspace: ${{ steps.set-ws.outputs.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
      - uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.TERRAFORM_SA }}
      - uses: google-github-actions/setup-gcloud@v3
      - name: Helm Lint (Charts)
        run: |
          helm lint charts/vikunja || exit 1
          helm lint charts/keycloak || exit 1
          helm lint charts/platform || exit 1
      - name: Helm Template (Vikunja)
        run: helm template vikunja charts/vikunja -f charts/vikunja/values.yaml > rendered.yaml
      - name: Install kubeconform
        run: |
          curl -sSL https://github.com/yannh/kubeconform/releases/download/v0.6.7/kubeconform-linux-amd64.tar.gz | tar -xz kubeconform
          sudo mv kubeconform /usr/local/bin/
      - name: Kubeconform Validate
        run: kubeconform -ignore-missing-schemas -schema-location default -summary rendered.yaml
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=$TF_STATE_BUCKET" \
            -backend-config="prefix=terraform"
      - id: set-ws
        name: Select Workspace
        run: |
          WS=$(echo dev)
          echo "Target workspace: $WS"
          if terraform workspace select "$WS" >/dev/null 2>&1; then
            echo "Workspace $WS selected (already existed)"
          else
            echo "Workspace $WS does not exist; creating"
            terraform workspace new "$WS"
            terraform workspace select "$WS"
          fi
          echo "workspace=$WS" >> "$GITHUB_OUTPUT"
          echo "TF_WORKSPACE=$WS" >> $GITHUB_ENV
      - name: Validate Terraform
        run: |
          terraform fmt -check -recursive
          terraform validate
      - name: Terraform Plan
        run: |
          terraform plan -input=false \
            -var-file=environments/$TF_WORKSPACE.tfvars \
            -var "project_id=${PROJECT_ID}" \
            -var "region=${REGION}" \
            -var "vikunja_db_password=${VIKUNJA_DB_PASSWORD}" \
            -var "keycloak_db_password=${KEYCLOAK_DB_PASSWORD}" \
            -no-color | tee plan.out
      - uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ env.TF_WORKSPACE }}
          path: plan.out

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: plan
    env:
      WORKSPACE: ${{ needs.plan.outputs.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
      - uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.TERRAFORM_SA }}
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=$TF_STATE_BUCKET" \
            -backend-config="prefix=terraform"
      - name: Select Workspace
        run: terraform workspace select ${WORKSPACE}
      # - name: Await Prod Approval (Production)
      #   if: github.ref == 'refs/heads/main'
      #   uses: trstringer/manual-approval@v1
      #   with:
      #     secret: ${{ github.TOKEN }}
      #     approvers: ${{ env.PROD_APPROVERS }}
      #     minimum-approvals: 1
      #     issue-title: "Prod Apply Approval (workspace: ${{ needs.plan.outputs.workspace }})"
      #     issue-body: "Approve to apply Terraform to production workspace."
      - name: Terraform Apply
        run: |
          terraform apply -input=false -auto-approve \
            -var-file=environments/${WORKSPACE}.tfvars \
            -var "project_id=${PROJECT_ID}" \
            -var "region=${REGION}" \
            -var "vikunja_db_password=${VIKUNJA_DB_PASSWORD}" \
            -var "keycloak_db_password=${KEYCLOAK_DB_PASSWORD}"

  deploy-keycloak:
    name: Deploy Keycloak
    runs-on: ubuntu-latest
    needs: apply
    if: github.ref != 'refs/heads/main'
    env:
      WORKSPACE: ${{ needs.plan.outputs.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.TERRAFORM_SA }}
      - uses: google-github-actions/setup-gcloud@v3
      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v3'
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.CLUSTER_LOCATION }}
      - name: Create Keycloak Secrets
        run: |
          kubectl create secret generic keycloak-admin \
            --from-literal=username="$KEYCLOAK_ADMIN_USER" \
            --from-literal=password="$KEYCLOAK_ADMIN_PASSWORD" \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic keycloak-db --from-literal=password="$KEYCLOAK_DB_PASSWORD" --dry-run=client -o yaml | kubectl apply -f -
      - name: Helm Deploy Keycloak
        run: |
          INSTANCE_CONNECTION="$PROJECT_ID:$REGION:$CLOUDSQL_INSTANCE"
          helm upgrade --install keycloak charts/keycloak -f charts/keycloak/values.yaml \
            --set cloudsql.enabled=true \
            --set cloudsql.instanceConnectionName=$INSTANCE_CONNECTION \
            --set database.host=127.0.0.1 \
            --set hostnameOverride=$KEYCLOAK_HOST \
            --set realm.clients[0].redirectUris[0]="https://$VIKUNJA_HOST/*" \
            --set realm.enabled=true \
            --wait --timeout 10m

  deploy-vikunja:
    name: Deploy Vikunja
    runs-on: ubuntu-latest
    needs: deploy-keycloak
    if: github.ref != 'refs/heads/main'
    env:
      WORKSPACE: ${{ needs.plan.outputs.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.TERRAFORM_SA }}
      - uses: google-github-actions/setup-gcloud@v3
      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v3'
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.CLUSTER_LOCATION }}
      - name: Helm Deploy Vikunja
        run: |
          INSTANCE_CONNECTION="$PROJECT_ID:$REGION:$CLOUDSQL_INSTANCE"
          # Create/Update Vikunja DB password secret (expected by deployment)
          kubectl create secret generic vikunja-db \
            --from-literal=password="$VIKUNJA_DB_PASSWORD" \
            --dry-run=client -o yaml | kubectl apply -f -
          helm upgrade --install vikunja charts/vikunja -f charts/vikunja/values.yaml \
            --set cloudsql.enabled=true \
            --set cloudsql.instanceConnectionName=$INSTANCE_CONNECTION \
            --set "openid.providers[0].clientsecret=$VIKUNJA_CLIENTSECRET" \
            --wait --timeout 10m
      - name: Helm Deploy Platform Ingress
        run: |
          set -e
          helm upgrade --install platform charts/platform \
            --set staticIpName=$PLATFORM_LB_IP_NAME \
            --set ingressClass=gce \
            --set hosts.vikunja=$VIKUNJA_HOST \
            --set hosts.keycloak=$KEYCLOAK_HOST \
            --wait --timeout 5m
          kubectl get ingress platform -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true

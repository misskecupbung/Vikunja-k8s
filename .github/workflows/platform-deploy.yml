name: Platform Infrastructure & App Deployment

on:
  push:
    branches: [main, dev, feature/**]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: platform-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write

env:
  TF_IN_AUTOMATION: true
  GOOGLE_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
  TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
  TF_VAR_region: ${{ secrets.GCP_REGION }}
  # Database passwords sourced directly from GitHub secrets (single source of truth)
  TF_VAR_vikunja_db_password: ${{ secrets.VIKUNJA_DB_PASSWORD }}
  TF_VAR_keycloak_db_password: ${{ secrets.KEYCLOAK_DB_PASSWORD }}
  # Backward compatibility (deprecated Terraform variable)
  TF_VAR_db_password: ${{ secrets.VIKUNJA_DB_PASSWORD }}
  VIKUNJA_DB_PASSWORD: ${{ secrets.VIKUNJA_DB_PASSWORD }}
  KEYCLOAK_DB_PASSWORD: ${{ secrets.KEYCLOAK_DB_PASSWORD }}
  CLUSTER_NAME: "vikunja-gke"
  CLUSTER_LOCATION: "us-central1-a"
  CLOUDSQL_INSTANCE: "vikunja-db"
  KEYCLOAK_ADMIN_USER: "admin"
  KEYCLOAK_ADMIN_PASSWORD: "admin"  # override with secret if desired
  
jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    outputs:
      workspace: ${{ steps.set-ws.outputs.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
      - uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_TERRAFORM_SA }}
      - uses: google-github-actions/setup-gcloud@v3
      - name: Helm Template (Vikunja)
        run: helm template vikunja charts/vikunja -f charts/vikunja/values.yaml > rendered.yaml
      - name: Install kubeconform
        run: |
          curl -sSL https://github.com/yannh/kubeconform/releases/download/v0.6.7/kubeconform-linux-amd64.tar.gz | tar -xz kubeconform
          sudo mv kubeconform /usr/local/bin/
      - name: Kubeconform Validate
        run: kubeconform -ignore-missing-schemas -schema-location default -summary rendered.yaml
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform"
      - id: set-ws
        name: Select Workspace
        run: |
          WS=$([[ "${{ github.ref }}" == "refs/heads/main" ]] && echo prod || echo dev)
          echo "Target workspace: $WS"
          if terraform workspace select "$WS" >/dev/null 2>&1; then
            echo "Workspace $WS selected (already existed)"
          else
            echo "Workspace $WS does not exist; creating"
            terraform workspace new "$WS"
            terraform workspace select "$WS"
          fi
          echo "workspace=$WS" >> "$GITHUB_OUTPUT"
          echo "TF_WORKSPACE=$WS" >> $GITHUB_ENV
      - name: Validate Terraform
        run: |
          terraform fmt -check -recursive
          terraform validate
      - name: Terraform Plan
        run: terraform plan -input=false -var-file=environments/$TF_WORKSPACE.tfvars -no-color | tee plan.out
      - uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ env.TF_WORKSPACE }}
          path: plan.out

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: plan
    env:
      WORKSPACE: ${{ needs.plan.outputs.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
      - uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_TERRAFORM_SA }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform"

      - name: Select Workspace
        run: terraform workspace select ${WORKSPACE}

      - name: Await Prod Approval (Production)
        if: github.ref == 'refs/heads/main'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: misskecupbung
          minimum-approvals: 1
          issue-title: "Prod Apply Approval (workspace: ${{ needs.prepare.outputs.workspace }})"
          issue-body: "Approve to apply Terraform to production workspace."

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve -var-file=environments/${WORKSPACE}.tfvars

  deploy-keycloak:
    name: Deploy Keycloak
    runs-on: ubuntu-latest
    needs: apply
    if: github.ref != 'refs/heads/main'
    env:
      WORKSPACE: ${{ needs.plan.outputs.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_TERRAFORM_SA }}
      - uses: google-github-actions/setup-gcloud@v3

      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v3'
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.CLUSTER_LOCATION }}

      - name: Create Keycloak Secrets
        run: |
          if [ -z "${{ secrets.KEYCLOAK_DB_PASSWORD }}" ]; then echo "Missing KEYCLOAK_DB_PASSWORD secret" >&2; exit 1; fi
          # Prefer GitHub secrets for admin creds if provided
          ADMIN_USER=${{ secrets.KEYCLOAK_ADMIN_USER || env.KEYCLOAK_ADMIN_USER }}
          ADMIN_PASS=${{ secrets.KEYCLOAK_ADMIN_PASSWORD || env.KEYCLOAK_ADMIN_PASSWORD }}
          kubectl create secret generic keycloak-admin \
            --from-literal=username="${ADMIN_USER}" \
            --from-literal=password="${ADMIN_PASS}" \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic keycloak-db --from-literal=password='${{ secrets.KEYCLOAK_DB_PASSWORD }}' --dry-run=client -o yaml | kubectl apply -f -

      - name: Helm Deploy Keycloak
        run: |
          # Retrieve Cloud SQL public IP using gcloud (no terraform needed in this job)
          if [ -z "${CLOUDSQL_INSTANCE}" ]; then
            echo "CLOUDSQL_INSTANCE env var not set" >&2; exit 1
          fi
          DB_HOST=$(gcloud sql instances describe "${CLOUDSQL_INSTANCE}" --format="value(ipAddresses[0].ipAddress)" || true)
          if [ -z "$DB_HOST" ]; then
            echo "Failed to obtain public IP for instance ${CLOUDSQL_INSTANCE}" >&2; exit 1
          fi
          echo "Using Cloud SQL host: $DB_HOST"
          set -e
          if ! helm upgrade --install keycloak charts/keycloak -f charts/keycloak/values-ci.yaml \
            --set database.host=$DB_HOST \
            --set cloudsql.enabled=false \
            --wait --timeout 10m; then
            echo "Helm install/upgrade failed; dumping pod diagnostics:" >&2
            kubectl get pods -l app=keycloak -o wide || true
            kubectl describe pods -l app=keycloak || true
            kubectl logs -l app=keycloak --all-containers --tail=200 || true
            exit 1
          fi

  deploy-vikunja:
    name: Deploy Vikunja
    runs-on: ubuntu-latest
    needs: deploy-keycloak
    if: github.ref != 'refs/heads/main'
    env:
      WORKSPACE: ${{ needs.plan.outputs.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_TERRAFORM_SA }}
      - uses: google-github-actions/setup-gcloud@v3

      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v3'
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.CLUSTER_LOCATION }}

      - name: Create Vikunja Secret
        run: |
          if [ -z "${{ secrets.VIKUNJA_DB_PASSWORD }}" ]; then echo "Missing VIKUNJA_DB_PASSWORD secret" >&2; exit 1; fi
          kubectl create secret generic vikunja-db --from-literal=password='${{ secrets.VIKUNJA_DB_PASSWORD }}' --dry-run=client -o yaml | kubectl apply -f -

      - name: Helm Deploy Vikunja
        run: |
          # Retrieve Cloud SQL public IP similar to Keycloak deployment
          if [ -z "${CLOUDSQL_INSTANCE}" ]; then
            echo "CLOUDSQL_INSTANCE env var not set" >&2; exit 1
          fi
          DB_HOST=$(gcloud sql instances describe "${CLOUDSQL_INSTANCE}" --format="value(ipAddresses[0].ipAddress)" || true)
          if [ -z "$DB_HOST" ]; then
            echo "Failed to obtain public IP for instance ${CLOUDSQL_INSTANCE}" >&2; exit 1
          fi
          echo "Using Cloud SQL host for Vikunja: $DB_HOST"
          set -e
          if ! helm upgrade --install vikunja charts/vikunja -f charts/vikunja/values-ci.yaml \
            --set cloudsql.enabled=false \
            --set postgres.host=$DB_HOST \
            --wait --timeout 10m; then
            echo "Helm install/upgrade failed; dumping pod diagnostics:" >&2
            kubectl get pods -l app=vikunja -o wide || true
            kubectl describe pods -l app=vikunja || true
            kubectl logs -l app=vikunja --all-containers --tail=200 || true
            exit 1
          fi

name: Platform Infrastructure & App Deployment

on:
  push:
    branches: [main, dev, feature/**]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: platform-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write

env:
  TF_IN_AUTOMATION: true
  GOOGLE_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
  TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
  TF_VAR_region: ${{ secrets.GCP_REGION }}

jobs:
  prepare:
    name: Prepare Environment
    runs-on: ubuntu-latest
    outputs:
      workspace: ${{ steps.set-ws.outputs.workspace }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_TERRAFORM_SA }}

      - uses: google-github-actions/setup-gcloud@v3

      - name: Export Secrets
        run: |
          if [ -z "${{ secrets.VIKUNJA_DB_PASSWORD }}" ]; then
            echo "Missing VIKUNJA_DB_PASSWORD secret" >&2; exit 1
          fi
          echo "TF_VAR_db_password=${{ secrets.VIKUNJA_DB_PASSWORD }}" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform"

      - id: set-ws
        name: Select Workspace
        run: |
          WS=$([[ "${{ github.ref }}" == "refs/heads/main" ]] && echo prod || echo dev)
          echo "Using workspace: $WS"
          terraform workspace new $WS || true
          terraform workspace select $WS
          echo "workspace=$WS" >> "$GITHUB_OUTPUT"
          echo "TF_WORKSPACE=$WS" >> $GITHUB_ENV

      - name: Helm Template (Vikunja)
        run: helm template vikunja charts/vikunja -f charts/vikunja/values.yaml > rendered.yaml

      - name: Install kubeconform
        run: |
          curl -sSL https://github.com/yannh/kubeconform/releases/download/v0.6.7/kubeconform-linux-amd64.tar.gz | tar -xz kubeconform
          sudo mv kubeconform /usr/local/bin/

      - name: Kubeconform Validate
        run: kubeconform -ignore-missing-schemas -schema-location default -summary rendered.yaml

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
      - uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_TERRAFORM_SA }}
      - uses: google-github-actions/setup-gcloud@v3

      - name: Terraform Init
        run: terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform"

      - name: Select Workspace
        run: terraform workspace select ${{ needs.prepare.outputs.workspace }}

      - name: Validate Terraform
        run: |
          terraform fmt -check -recursive
          terraform validate

      - name: Terraform Plan
        run: terraform plan -input=false -var-file=environments/${{ needs.prepare.outputs.workspace }}.tfvars -no-color | tee plan.out

      - uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ needs.prepare.outputs.workspace }}
          path: plan.out

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: plan
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
      - uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_TERRAFORM_SA }}
      - uses: google-github-actions/setup-gcloud@v3

      - name: Terraform Init & Select Workspace
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform"
          terraform workspace select ${{ needs.prepare.outputs.workspace }}

      - name: Await Prod Approval
        if: github.ref == 'refs/heads/main'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: misskecupbung
          minimum-approvals: 1
          issue-title: "Prod Apply Approval (workspace: ${{ needs.prepare.outputs.workspace }})"
          issue-body: "Approve to apply Terraform to production workspace."

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve -var-file=environments/${{ needs.prepare.outputs.workspace }}.tfvars

  deploy-keycloak:
    name: Deploy Keycloak
    runs-on: ubuntu-latest
    needs: apply
    if: github.ref != 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_TERRAFORM_SA }}
      - uses: google-github-actions/setup-gcloud@v3

      - name: Get GKE Credentials
        run: |
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV
          CLUSTER_NAME="vikunja-gke"
          REGION="${{ env.TF_VAR_region }}"
          ZONE_LINE=$(grep -E '^cluster_location' environments/${{ needs.prepare.outputs.workspace }}.tfvars || true)
          if [ -n "$ZONE_LINE" ]; then
            ZONE=$(echo "$ZONE_LINE" | awk -F'"' '{print $2}')
            gcloud container clusters get-credentials "$CLUSTER_NAME" --zone "$ZONE" --project "$GOOGLE_PROJECT"
          else
            gcloud container clusters get-credentials "$CLUSTER_NAME" --region "$REGION" --project "$GOOGLE_PROJECT"
          fi
          for i in {1..30}; do
            kubectl get nodes >/dev/null 2>&1 && break
            echo "Waiting for cluster ($i)"; sleep 10
          done

      - name: Create Keycloak Secrets
        run: |
          if [ -z "${{ secrets.KEYCLOAK_DB_PASSWORD }}" ]; then echo "Missing KEYCLOAK_DB_PASSWORD secret" >&2; exit 1; fi
          kubectl create secret generic keycloak-admin --from-literal=password=admin --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic keycloak-db --from-literal=password='${{ secrets.KEYCLOAK_DB_PASSWORD }}' --dry-run=client -o yaml | kubectl apply -f -

      - name: Helm Deploy Keycloak
        run: helm upgrade --install keycloak charts/keycloak -f charts/keycloak/values-ci.yaml --wait --timeout 5m

  deploy-vikunja:
    name: Deploy Vikunja
    runs-on: ubuntu-latest
    needs: deploy-keycloak
    if: github.ref != 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_TERRAFORM_SA }}
      - uses: google-github-actions/setup-gcloud@v3

      - name: Get GKE Credentials
        run: |
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV
          CLUSTER_NAME="vikunja-gke"
          REGION="${{ env.TF_VAR_region }}"
          ZONE_LINE=$(grep -E '^cluster_location' environments/${{ needs.prepare.outputs.workspace }}.tfvars || true)
          if [ -n "$ZONE_LINE" ]; then
            ZONE=$(echo "$ZONE_LINE" | awk -F'"' '{print $2}')
            gcloud container clusters get-credentials "$CLUSTER_NAME" --zone "$ZONE" --project "$GOOGLE_PROJECT"
          else
            gcloud container clusters get-credentials "$CLUSTER_NAME" --region "$REGION" --project "$GOOGLE_PROJECT"
          fi

      - name: Create Vikunja Secret
        run: |
          if [ -z "${{ secrets.VIKUNJA_DB_PASSWORD }}" ]; then echo "Missing VIKUNJA_DB_PASSWORD secret" >&2; exit 1; fi
          kubectl create secret generic vikunja-db --from-literal=password='${{ secrets.VIKUNJA_DB_PASSWORD }}' --dry-run=client -o yaml | kubectl apply -f -

      - name: Helm Deploy Vikunja
        run: |
          helm upgrade --install vikunja charts/vikunja -f charts/vikunja/values-ci.yaml \
            --set postgres.password='${{ secrets.VIKUNJA_DB_PASSWORD }}' \
            --wait --timeout 5m

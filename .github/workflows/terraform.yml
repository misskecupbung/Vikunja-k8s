name: Terraform Apply Workflow

on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

env:
  TF_IN_AUTOMATION: true
  GOOGLE_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
  TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
  TF_VAR_region: ${{ secrets.GCP_REGION }}

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      workspace: ${{ steps.set-ws.outputs.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Authenticate to Google Cloud (OIDC)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_TERRAFORM_SA }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Debug GCP Identity
        run: |
          echo "Auth context (expected SA: ${{ secrets.GCP_TERRAFORM_SA }})";
          gcloud auth list;
          gcloud config list --format 'value(core.project,core.account)';
          echo 'Enabled services (sample):';
          gcloud services list --enabled --limit=10 || true

      - name: Guard Active Service Account
        run: |
          ACT=$(gcloud config get-value account 2>/dev/null || true)
          EXP='${{ secrets.GCP_TERRAFORM_SA }}'
          echo "Active account: $ACT"; echo "Expected: $EXP"
          if [ "$ACT" != "$EXP" ]; then
            echo "Mismatch: impersonation not effective. Failing early." >&2
            exit 1
          fi

      - name: Raw Secret REST Test (pre-fetch)
        run: |
          set -euo pipefail
          ACCESS_TOKEN=$(gcloud auth print-access-token)
          PROJECT='${{ secrets.GCP_PROJECT_ID }}'
          SECRET_ID='vikunja-db-password'
          echo "Calling Secret Manager REST for $SECRET_ID in $PROJECT";
          HTTP_CODE=$(curl -s -o /tmp/resp -w '%{http_code}' -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://secretmanager.googleapis.com/v1/projects/$PROJECT/secrets/$SECRET_ID/versions/latest:access" )
          echo "HTTP_CODE=$HTTP_CODE"
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Response body:"; cat /tmp/resp; exit 1; fi
          head -c 10 /tmp/resp || true; echo; echo "REST secret test succeeded"

      - name: Fetch DB password (with fallback)
        id: fetch-secret
        run: |
          set -euo pipefail
          SECRET_NAME="vikunja-db-password"
          PROJECT="${{ secrets.GCP_PROJECT_ID }}"
          echo "Attempting Secret Manager access for $SECRET_NAME in $PROJECT"
          FALLBACK_FLAG=0
          if PASSWORD=$(gcloud secrets versions access latest --secret="$SECRET_NAME" --project "$PROJECT" 2> /tmp/secret_err); then
            echo "Secret Manager fetch successful."
          elif [ -n "${{ secrets.VIKUNJA_DB_PASSWORD }}" ]; then
            echo "Secret Manager fetch failed; using GitHub secret fallback."; FALLBACK_FLAG=1
            PASSWORD='${{ secrets.VIKUNJA_DB_PASSWORD }}'
          else
            echo "Secret Manager fetch failed (details):"; cat /tmp/secret_err || true
            echo "No GitHub fallback provided; generating ephemeral password (NOT FOR PROD)."; FALLBACK_FLAG=2
            # Avoid piping to head (causes broken pipe under set -euo pipefail)
            # Generate 48 bytes base64 then strip non-alphanumerics and cut to 24 chars
            PASSWORD=$(openssl rand -base64 48 | tr -dc 'A-Za-z0-9' | cut -c1-24)
          fi
          if [ "$FALLBACK_FLAG" = "2" ]; then
            echo "WARNING: Ephemeral password generated. Create Secret Manager secret '$SECRET_NAME' to eliminate this path." >&2
          fi
          echo "::add-mask::$PASSWORD"
          echo "TF_VAR_db_password=$PASSWORD" >> "$GITHUB_ENV"
          echo "fallback_used=$FALLBACK_FLAG" >> "$GITHUB_OUTPUT"

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform"

      - name: Select Terraform Workspace
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then WS=prod; else WS=dev; fi
          echo "Using workspace: $WS"
          if ! terraform workspace list | grep -q "^*\?\s*$WS$" && ! terraform workspace list | grep -q "\s$WS$"; then
            terraform workspace new $WS
          fi
          terraform workspace select $WS
          echo "TF_WORKSPACE=$WS" >> $GITHUB_ENV

      - name: Set Workspace Output
        id: set-ws
        run: echo "workspace=$TF_WORKSPACE" >> "$GITHUB_OUTPUT"

      - name: Terraform Format
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Install kubeconform
        run: |
          curl -sSL https://github.com/yannh/kubeconform/releases/download/v0.6.7/kubeconform-linux-amd64.tar.gz | tar -xz kubeconform
          sudo mv kubeconform /usr/local/bin/

      - name: Helm Template (render)
        run: helm template test charts/vikunja --values charts/vikunja/values.yaml > rendered.yaml

      - name: Kubeconform Validate
        run: kubeconform -ignore-missing-schemas -schema-location default -summary rendered.yaml

      - name: Terraform Plan
        run: terraform plan -input=false -var-file=environments/$TF_WORKSPACE.tfvars -no-color | tee plan.out

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ env.TF_WORKSPACE }}
          path: plan.out

  manual-approval:
    name: Manual Approval
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: success()
    permissions:
      issues: write
      contents: read
    steps:
      - name: Await Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: misskecupbung
          minimum-approvals: 1
          issue-title: "Manual Approval Required for Terraform Apply (workspace: ${{ needs.terraform-plan.outputs.workspace }})"
          issue-body: |
            Please approve or deny the deployment.
            Workspace: ${{ needs.terraform-plan.outputs.workspace }}
            Plan artifact: terraform-plan-${{ needs.terraform-plan.outputs.workspace }}
            Fallback secret used flag: ${{ steps.fetch-secret.outputs.fallback_used }}

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [manual-approval, terraform-plan]
    permissions:
      contents: read
      id-token: write
    env:
      TARGET_WS: ${{ needs.terraform-plan.outputs.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
      - name: Authenticate to Google Cloud (OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_TERRAFORM_SA }}
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
      - name: Fetch DB password (must succeed)
        run: |
          set -euo pipefail
          SECRET_NAME="vikunja-db-password"
          PROJECT="${{ secrets.GCP_PROJECT_ID }}"
          if PASSWORD=$(gcloud secrets versions access latest --secret="$SECRET_NAME" --project "$PROJECT" 2> /tmp/secret_err); then
            echo "::add-mask::$PASSWORD"; echo "TF_VAR_db_password=$PASSWORD" >> "$GITHUB_ENV"
          else
            echo "FATAL: Secret fetch failed during apply."; cat /tmp/secret_err || true; exit 1
          fi
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform"
      - name: Select Workspace
        run: |
          WS="$TARGET_WS"
          echo "Applying to workspace: $WS"
          terraform workspace list | grep -q "\s$WS$" || terraform workspace new $WS
          terraform workspace select $WS
          echo "TF_WORKSPACE=$WS" >> $GITHUB_ENV
      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve -var-file=environments/$TF_WORKSPACE.tfvars

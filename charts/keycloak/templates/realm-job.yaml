{{- if and .Values.realm.enabled .Values.postInstall.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: keycloak-realm-bootstrap
  labels:
    app: keycloak
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      restartPolicy: OnFailure
      containers:
        - name: realm-bootstrap
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          env:
            - name: KEYCLOAK_ADMIN
              valueFrom:
                secretKeyRef:
                  name: keycloak-admin
                  key: username
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-admin
                  key: password
          command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail
              BASE_URL="http://keycloak:8080"
              echo "Waiting for Keycloak readiness..."
              until curl -sf "${BASE_URL}/health/ready" >/dev/null; do sleep 5; done
              echo "Keycloak is ready. Configuring realm {{ .Values.realm.name }}"
              /opt/keycloak/bin/kcadm.sh config credentials --server "${BASE_URL}" --realm master --user "$KEYCLOAK_ADMIN" --password "$KEYCLOAK_ADMIN_PASSWORD"
              if ! /opt/keycloak/bin/kcadm.sh get realms/{{ .Values.realm.name }} >/dev/null 2>&1; then
                echo "Creating realm {{ .Values.realm.name }}"
                /opt/keycloak/bin/kcadm.sh create realms -s realm={{ .Values.realm.name }} -s enabled=true
              else
                echo "Realm {{ .Values.realm.name }} already exists"
              fi
              {{- range .Values.realm.clients }}
              if ! /opt/keycloak/bin/kcadm.sh get clients -r {{ $.Values.realm.name }} --fields clientId | grep -q '"clientId" : "{{ .clientId }}"'; then
                echo "Creating client {{ .clientId }}"
                cat <<'EOF' > /tmp/client.json
{
  "clientId": "{{ .clientId }}",
  "publicClient": {{ if .publicClient }}true{{ else }}false{{ end }},
  "redirectUris": [
{{- range $i, $uri := .redirectUris }}{{ if $i }}, {{ end }}    "{{ $uri }}"{{ end }}
  ],
  "protocol": "openid-connect",
  "standardFlowEnabled": true,
  "directAccessGrantsEnabled": true
}
EOF
                /opt/keycloak/bin/kcadm.sh create clients -r {{ $.Values.realm.name }} -f /tmp/client.json
              else
                echo "Client {{ .clientId }} already exists"
              fi
              {{- end }}
{{- end }}